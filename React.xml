<templateSet group="React">
  <template name="comp" value="import React, {Component, PropTypes} from &quot;react&quot;;&#10;&#10;export default class $componentName$ extends Component {&#10;    static propTypes = {&#10;        &#10;    };&#10;    &#10;    render() {&#10;        return (&#10;            &lt;div&gt;&#10;                $END$&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;}" description="Reactive Component" toReformat="true" toShortenFQNames="true">
    <variable name="componentName" expression="capitalize(fileNameWithoutExtension())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_STATEMENT" value="false" />
    </context>
  </template>
  <template name="if" value="&lt;If condition={$condition$}&gt;&#10;    $END$&#10;&lt;/If&gt;" description="JSX if control statement" toReformat="true" toShortenFQNames="true">
    <variable name="condition" expression="" defaultValue="&quot;true&quot;" alwaysStopAt="true" />
    <context>
      <option name="JSX_HTML" value="true" />
    </context>
  </template>
  <template name="for" value="&lt;For each=&quot;$itemName$&quot; of={$collection$} index=&quot;index&quot;&gt;&#10;    $END$&#10;&lt;/For&gt;" description="JSX for control statement" toReformat="false" toShortenFQNames="true">
    <variable name="itemName" expression="" defaultValue="&quot;item&quot;" alwaysStopAt="true" />
    <variable name="collection" expression="" defaultValue="&quot;collection&quot;" alwaysStopAt="true" />
    <context>
      <option name="JSX_HTML" value="true" />
    </context>
  </template>
  <template name="translate" value="translator.i18n(&quot;$translationKey$&quot;)" description="Get i18n string from translator" toReformat="true" toShortenFQNames="true">
    <variable name="translationKey" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="choose" value="&lt;Choose&gt;&#10;    &lt;When condition={$condition$}&gt;&#10;        $END$&#10;    &lt;/When&gt;&#10;    &lt;Otherwise&gt;&#10;        &#10;    &lt;/Otherwise&gt;&#10;&lt;/Choose&gt;" description="JSX choose control statement" toReformat="true" toShortenFQNames="true">
    <variable name="condition" expression="" defaultValue="&quot;true&quot;" alwaysStopAt="true" />
    <context>
      <option name="JSX_HTML" value="true" />
    </context>
  </template>
  <template name="pt" value="$propName$: PropTypes.$propType$" description="insert PropType definition" toReformat="true" toShortenFQNames="true">
    <variable name="propName" expression="" defaultValue="&quot;prop&quot;" alwaysStopAt="true" />
    <variable name="propType" expression="enum(&quot;func&quot;,&quot;object&quot;,&quot;array&quot;,&quot;bool&quot;,&quot;number&quot;,&quot;string&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="rlc" value="$functionName$() {&#10;  $END$&#10;}" description="react Lifecicle method" toReformat="false" toShortenFQNames="true">
    <variable name="functionName" expression="enum(&quot;componentWillMount&quot;,&quot;componentDidMount&quot;,&quot;componentWillReceiveProps&quot;,&quot;shouldComponentUpdate&quot;,&quot;componentWillUpdate&quot;,&quot;componentDidUpdate&quot;,&quot;componentWillUnmount&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>